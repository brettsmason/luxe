<?xml version="1.0"?>
<ruleset name="WordPress Theme Coding Standards">

	<description>A custom set of code standard rules to check for WordPress themes.</description>

	<!-- Pass some flags to PHPCS:
		 p flag: Show progress of the run.
		 s flag: Show sniff codes in all reports.
		 v flag: Print verbose output.
		 n flag: Do not print warnings.
	-->
	<arg value="psvn" />

	<!-- Check up to 8 files simultanously. -->
	<arg name="parallel" value="8" />

	<!-- Only check the PHP, CSS and SCSS files. JS files are checked separately with ESLint. -->
	<arg name="extensions" value="php,css,scss/css" />

	<!-- Check all files in this directory and the directories below it. -->
	<file>.</file>

	<exclude-pattern>*/node_modules/*</exclude-pattern>
	<exclude-pattern>*/vendor/*</exclude-pattern>

	<!-- Include the WordPress-Extra standard. -->
	<rule ref="WordPress-Extra">
		<!--
		We may want a middle ground though. The best way to do this is add the
		entire ruleset, then rule by rule, remove ones that don't suit a project.
		We can do this by running `phpcs` with the '-s' flag, which allows us to
		see the names of the sniffs reporting errors.
		Once we know the sniff names, we can opt to exclude sniffs which don't
		suit our project like so.

		The below two examples just show how you can exclude rules.
		They are not intended as advice about which sniffs to exclude.
		-->

		<!-- Allow short array syntax. -->
		<exclude name="Generic.Arrays.DisallowShortArraySyntax"/>

		<!-- Allow short ternary syntax. -->
		<exclude name="WordPress.PHP.DisallowShortTernary"/>

		<!-- Allow class file name other than class-*. -->
		<exclude name="WordPress.Files.FileName.InvalidClassFileName"/>

		<!-- We have cache busting via dist/mix-manifest.json file. -->
		<exclude name="WordPress.WP.EnqueuedResourceParameters.MissingVersion"/>

		<!-- Don't require punctuation after inline comments -->
		<exclude name="Squiz.Commenting.InlineComment.InvalidEndChar"/>

		<!-- Comment punctuation doesn't matter -->
		<exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop"/>
		<exclude name="Squiz.Commenting.FunctionComment.ThrowsNoFullStop"/>
	</rule>

	<!-- Let's also check that everything is properly documented. -->
	<rule ref="WordPress-Docs"/>

	<!-- Add in some extra rules from other standards. -->
	<!-- Require short array syntax. -->
	<rule ref="Generic.Arrays.DisallowLongArraySyntax"/>

	<rule ref="WordPress.Files.FileName">
		<properties>
			<property name="is_theme" value="true"/>
		</properties>
	</rule>

	<!-- Check for PHP cross-version compatibility. -->
	<!--
	To enable this, the PHPCompatibility standard needs
	to be installed.
	See the readme for installation instructions:
	https://github.com/PHPCompatibility/PHPCompatibilityWP
	For more information, also see:
	https://github.com/PHPCompatibility/PHPCompatibility
	-->
	<config name="testVersion" value="7.4-99.0"/>
	<rule ref="PHPCompatibility"/>


	<!--
	To get the optimal benefits of using WPCS, we should add a couple of
	custom properties.
	Adjust the values of these properties to fit our needs.

	For information on additional custom properties available, check out
	the wiki:
	https://github.com/WordPress/WordPress-Coding-Standards/wiki/Customizable-sniff-properties
	-->
	<config name="minimum_supported_wp_version" value="5.8"/>

	<rule ref="WordPress.WP.I18n">
		<properties>
			<property name="text_domain" type="array" value="luxe"/>
		</properties>
	</rule>

</ruleset>
